/*
 * Copyright (C) 1998, 2000-2007, 2010, 2011, 2012, 2013 SINTEF ICT,
 * Applied Mathematics, Norway.
 *
 * Contact information: E-mail: tor.dokken@sintef.no                      
 * SINTEF ICT, Department of Applied Mathematics,                         
 * P.O. Box 124 Blindern,                                                 
 * 0314 Oslo, Norway.                                                     
 *
 * This file is part of GoTools.
 *
 * GoTools is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. 
 *
 * GoTools is distributed in the hope that it will be useful,        
 * but WITHOUT ANY WARRANTY; without even the implied warranty of         
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with GoTools. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public
 * License, a covered work must retain the producer line in every data
 * file that is created or manipulated using GoTools.
 *
 * Other Usage
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the GoTools library without
 * disclosing the source code of your own applications.
 *
 * This file may be used in accordance with the terms contained in a
 * written agreement between you and SINTEF ICT. 
 */

#include "GoTools/utils/config.h"
#include "GoTools/geometry/PointCloud.h"
#include "GoTools/utils/Array.h"
#include "GoTools/geometry/ObjectHeader.h"
#include "GoTools/lrsplines2D/LRSplineSurface.h"
#include "GoTools/lrsplines2D/LRSurfApprox.h"
#include <iostream>
#include <fstream>
#include <string.h>

using namespace Go;
using std::vector;

int compare_in_u(const void* el1, const void* el2)
{
  if (((double*)el1)[0] < ((double*)el2)[0])
    return -1;
  else if (((double*)el1)[0] > ((double*)el2)[0])
    return 1;
  else
    return 0;
}

int compare_in_v(const void* el1, const void* el2)
{
  if (((double*)el1)[1] < ((double*)el2)[1])
    return -1;
  else if (((double*)el1)[1] > ((double*)el2)[1])
    return 1;
  else
    return 0;
}

int main(int argc, char *argv[])
{
  if (argc != 8) {
    std::cout << "Usage: point cloud (.g2) lrspline_out.g2 div_u div_v tol maxiter to3D(-1/n)" << std::endl;
    return -1;
  }

  std::ifstream filein(argv[1]);
  std::ofstream fileout(argv[2]); 
  int ndiv = atoi(argv[3]);
  int mdiv = atoi(argv[4]);
  double AEPSGE = atof(argv[5]);
  int max_iter = atoi(argv[6]);
  int to3D = atoi(argv[7]);
  
  ObjectHeader header;
  header.read(filein);
  PointCloud3D points;
  points.read(filein);

  BoundingBox box = points.boundingBox();
  Point low = box.low();
  Vector3D vec(-low[0], -low[1], 0.0);
  points.translate(vec);

  std::ofstream of("translated_cloud.g2");
  points.writeStandardHeader(of);
  points.write(of);

  int nmb_pts = points.numPoints();
  vector<double> data(points.rawData(), points.rawData()+3*nmb_pts);

  // Divide data set into ndiv*mdiv pieces and create each surface
  // individually
  // Sort in u-direction
  int dim = 1;
  int del = dim+2;                   // Number of entries for each point
  qsort(&data[0], nmb_pts, del*sizeof(double), compare_in_u);

  double u1 = data[0];
  double u2 = data[data.size()-del];
  double udel = (u2 - u1)/(double)(ndiv);
  vector<vector<double> > sub_data(ndiv*mdiv);

  // Traverse points and divide them according to their position in the
  // u direction
  int ki, kj;
  double upar, vpar;
  int pp0, pp1;
  for (ki=0, pp0=0, upar=u1+udel; ki<ndiv; ++ki, upar+=udel)
    {
      for (pp1=pp0; pp1<(int)data.size() && data[pp1]<upar; pp1+=del);
      pp1 = std::min(pp1, (int)data.size());

      // Sort the current sub set of points according to the v-parameter
      qsort(&data[0]+pp0, (pp1-pp0)/del, del*sizeof(double), compare_in_v);

      double v1 = data[pp0+1];
      double v2 = data[pp1-del+1];
      double vdel = (v2 - v1)/(double)(mdiv);

      // Traverse the relevant points and store them in the associated element
      int pp2, pp3;
      for (kj=0, pp2=pp0, vpar=v1+vdel; kj<mdiv; ++kj, vpar+=vdel)
	{
	  for (pp3=pp2; pp3<pp1 && data[pp3+1]<vpar; pp3+=del);
	  if (fabs(v2-vpar) < 1.0e-4)
	    pp3 = pp1;

	  sub_data[ki*mdiv+kj].insert(sub_data[ki*mdiv+kj].begin(),
				      data.begin()+pp2, data.begin()+pp3);
	  pp2 = pp3;
	}
      pp0 = pp1;
    }
 
  std::ofstream of2("divided_cloud.g2");
  for (ki=0; ki<ndiv*mdiv; ++ki)
    {
      if (sub_data[ki].size() == 0)
	continue;

      of2 << "400 1 0 4 0 155 100 255" << std::endl;
      of2 << (int)sub_data[ki].size()/del << std::endl;
      for (kj=0; kj<(int)sub_data[ki].size(); kj+=del)
	{
	  for (int kr=0; kr<del; ++kr)
	    of2 << sub_data[ki][kj+kr] << " ";
	  of2 << std::endl;
	}
    }

  for (ki=0; ki<ndiv*mdiv; ++ki)
    {
      if (sub_data[ki].size() < 10)
	continue;
      //LRSurfApprox approx(6, 4, 6, 4, data, 1, AEPSGE, true, true);
      LRSurfApprox approx(4, 4, 4, 4, sub_data[ki], 1, AEPSGE, 
			  true, true /*false*/);
      approx.setTurn3D(to3D);

      double maxdist, avdist; // will be set below
      int nmb_out_eps;        // will be set below
      shared_ptr<LRSplineSurface> surf = 
	approx.getApproxSurf(maxdist, avdist, nmb_out_eps, max_iter);

      std::cout << "Maxdist= " << maxdist << ", avdist= " << avdist;
      std::cout << ", nmb out= " << nmb_out_eps << std::endl;

      if (surf.get())
	{
	  surf->to3D();
	  surf->writeStandardHeader(fileout);
	  surf->write(fileout);
	}
    }
}

