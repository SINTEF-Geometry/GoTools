/*
 * Copyright (C) 1998, 2000-2007, 2010, 2011, 2012, 2013 SINTEF ICT,
 * Applied Mathematics, Norway.
 *
 * Contact information: E-mail: tor.dokken@sintef.no                      
 * SINTEF ICT, Department of Applied Mathematics,                         
 * P.O. Box 124 Blindern,                                                 
 * 0314 Oslo, Norway.                                                     
 *
 * This file is part of GoTools.
 *
 * GoTools is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. 
 *
 * GoTools is distributed in the hope that it will be useful,        
 * but WITHOUT ANY WARRANTY; without even the implied warranty of         
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with GoTools. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public
 * License, a covered work must retain the producer line in every data
 * file that is created or manipulated using GoTools.
 *
 * Other Usage
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the GoTools library without
 * disclosing the source code of your own applications.
 *
 * This file may be used in accordance with the terms contained in a
 * written agreement between you and SINTEF ICT. 
 */

#ifndef _INTERPOLATOR_H
#define _INTERPOLATOR_H

#include <vector>
#include "GoTools/utils/config.h"

namespace Go
{

class BsplineBasis;

/// Base class for spline interpolators or approximators
class GO_API Interpolator
{
public:
    /// virtual desctructor assures safe inheritance
    virtual ~Interpolator();

    /// Interpolate or approximate a set of point data by a spline
    /// \param num_points the number of data points to approximate
    /// \param dimension the dimension of each data point
    /// \param param_start pointer to the array where the points' parameters
    ///                    are consecutively stored
    /// \param data_start pointer to the array where the points are consecutively
    ///                   stored
    /// \param coefs upon function completion, this vector will contain the 
    ///              control points of the interpolating (or approximating spline).
    ///              (In order to get access to the associated BsplineBasis, use
    ///              the function \ref basis().
    virtual void interpolate(int num_points,
			     int dimension,
			     const double* param_start,
			     const double* data_start,
			     std::vector<double>& coefs) = 0;
    
    /// after the function \ref interpolate() has been successfully run, this
    /// function can be called to get the BsplineBasis of the generated curve.
    /// \return a constant reference to the BsplineBasis of the curve previously 
    ///         generated by \ref interpolate().
    virtual const BsplineBasis& basis() = 0;
};

}

#endif // _INTERPOLATOR_H

